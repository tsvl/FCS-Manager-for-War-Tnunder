name: release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build and package (Windows)
    runs-on: windows-2022
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Validate tag format
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          if ($tag -notmatch '^v\d+\.\d+\.\d+$') {
            Write-Error "Tag '$tag' does not match required format 'vX.Y.Z' (e.g., v1.0.0)"
            exit 1
          }
          Write-Host "✓ Tag format valid: $tag"

      - name: Ensure tag commit is on main
        shell: pwsh
        run: |
          git fetch origin main --prune
          git merge-base --is-ancestor $env:GITHUB_SHA origin/main
          if ($LASTEXITCODE -ne 0) { Write-Error "Tag $env:GITHUB_REF_NAME is not pointing at a commit reachable from main"; exit 1 }

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '10.0.x'
          dotnet-quality: 'preview'

      - name: Restore
        shell: pwsh
        run: |
          dotnet restore ./src/FCS.csproj

      - name: Publish (win-x64, Release)
        shell: pwsh
        run: |
          $pub = Join-Path $env:RUNNER_TEMP "publish\"
          dotnet publish ./src/FCS.csproj -c Release -r win-x64 --no-restore -p:PublishDir="$pub"

          if (!(Test-Path $pub)) { Write-Error "Publish output not found at $pub"; exit 1 }
          Write-Host "Published to $pub"
          "PUBLISH_DIR=$pub" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify build output
        shell: pwsh
        run: |
          $exe = Join-Path $env:PUBLISH_DIR "FCS.exe"
          if (!(Test-Path $exe)) {
            Write-Error "Expected executable 'FCS.exe' not found in publish output"
            exit 1
          }
          $size = (Get-Item $exe).Length
          Write-Host "✓ Build verification passed: FCS.exe ($([math]::Round($size/1KB, 2)) KB)"

      - name: Package ZIP and checksums
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $dist = Join-Path $env:GITHUB_WORKSPACE "dist"
          New-Item -ItemType Directory -Path $dist -Force | Out-Null

          $zipName = "WT-FCSGenerator-$tag-win-x64.zip"
          $zipPath = Join-Path $dist $zipName

          # Compress publish output directly
          Compress-Archive -Path (Join-Path $env:PUBLISH_DIR "*") -DestinationPath $zipPath -Force

          $zipSize = (Get-Item $zipPath).Length
          Write-Host "Created $zipName ($([math]::Round($zipSize/1MB, 2)) MB)"

          # Generate SHA256 checksum
          $hash = (Get-FileHash -Algorithm SHA256 $zipPath).Hash.ToLower()
          "$hash  $zipName" | Out-File -FilePath (Join-Path $dist "$zipName.sha256") -Encoding ascii
          Write-Host "SHA256: $hash"

      - name: Attest ZIP provenance
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: 'dist/*.zip'

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            dist/*.zip
            dist/*.sha256
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-assets
          path: dist

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.zip
            dist/*.sha256
